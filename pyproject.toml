[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fibonacci-api"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Timon Viola", email = "viotimo@dfds.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "fastapi[all]>=0.115.12,<0.116.0",
]

[project.urls]
Documentation = "https://github.com/Timon Viola/fibonacci-api#readme"
Issues = "https://github.com/Timon Viola/fibonacci-api/issues"
Source = "https://github.com/Timon Viola/fibonacci-api"

[tool.hatch.version]
path = "src/fibonacci_api/__about__.py"

[tool.hatch.envs.default.scripts]
# Default environment scripts for development and database operations
dev = "fastapi dev {args:src/fibonacci_api/main.py}"


[tool.hatch.envs.test]
extra-dependencies = [
  "pytest>=8.0.0",
  "hypothesis>=6.0.0",
  "schemathesis==3.39.16"
]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[[tool.hatch.envs.test.matrix]]
python = ["3.12"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/fibonacci_api tests}"

[tool.coverage.run]
source_pkgs = ["fibonacci_api", "tests"]
branch = true
parallel = true
omit = [
  "src/fibonacci_api/__about__.py",
]

[tool.coverage.paths]
fibonacci_api = ["src/fibonacci_api", "*/fibonacci-api/src/fibonacci_api"]
tests = ["tests", "*/fibonacci-api/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
# Ruff config

[tool.ruff]
target-version = "py312"
line-length = 80
include = ["pyproject.toml", "src/**/*.py", "tests/**/*.py"]
exclude = [
  "typings/*"
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = [
    "fastapi",
    "httpx",
    "pydantic",
    "pytest",
    "sqlalchemy",
    "testcontainers",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
pretty = true
show_error_codes = true
disable_error_code = [
    "annotation-unchecked",
]
exclude = [
    "^examples/*",
    "^typings/*"
]


[tool.basedpyright]
include = ["src"]
exclude = ["**/__pycache__",
    "src/experimental",
    "src/typestubs"
]
defineConstant = { DEBUG = true }
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
